"Hymenoptera_Formicidae_Camponotus_kiesenwetteri_1831143727_2771107",
"Hymenoptera_Andrenidae_Andrena_flavipes_17292380",
"Lepidoptera_Adelidae_Adela_australis_2844524118_991446",
"Orthoptera_Acrididae_Arminda_fuerteventurae_2596081023_40432")
dt_fig_1 <- dt[save_name_no_ext %in% sp_fig_1, .(filename, url, license)]
dt_fig_1 <- dt[filename %in% sp_fig_1, .(filename, url, license)]
dt_fig_1
dt
dt[grepl(pattern = 'inaturalist', x = url), .N] # 11631
dt[grepl(pattern = 'inaturalist', x = url), .N] / nrow(dt) * 100 # 53.8572
dt[grepl(pattern = 'observation', x = url), .N] # 9267
dt[grepl(pattern = 'observation', x = url), .N] / nrow(dt) * 100 # 42.91072
library(data.table)
library(magrittr)
library(ggplot2)
library(data.table)
library(magrittr)
library(ggplot2)
dt <- fread('./data/data_tables/img_annotation.txt')
dt
# Compute box areas
dt[, relative_box_area := (width_rel * height_rel)]
# Compute box areas
dt[, relative_box_area := (width_rel * height_rel)]
dt_stats <- dt[!is.na(label_name), .(min_rba = min(relative_box_area),
q1 = quantile(relative_box_area, probs = 0.25),
mean_rba = mean(relative_box_area),
median_rba = median(relative_box_area),
q3 = quantile(relative_box_area, probs = 0.75),
max_rba = max(relative_box_area)),
keyby = label_name]
dt
dt_stats <- dt[used_for_ai == 1, .(min_rba = min(relative_box_area),
q1 = quantile(relative_box_area, probs = 0.25),
mean_rba = mean(relative_box_area),
median_rba = median(relative_box_area),
q3 = quantile(relative_box_area, probs = 0.75),
max_rba = max(relative_box_area)),
keyby = label_name]
dt_stats
quantile(dt[!is.na(label_name), relative_box_area], probs = c(0.25, 0.75))
quantile(dt[used_for_ai == 1, relative_box_area], probs = c(0.25, 0.75))
summary(dt[used_for_ai == 1, relative_box_area])
ggplot() +
geom_histogram(data = dt[used_for_ai == 1],
aes(x = relative_box_area)) +
# geom_histogram(aes(y=..density..), alpha=0.5, binwidth = 0.1) +
# geom_density(alpha=0.6) +
geom_vline(data = dt_stats,
aes(xintercept = mean_rba),
color = 'red') +
facet_wrap(. ~ label_name, scales = 'free_y')
# install.packages('bit64')
library(bit64)
library(data.table)
library(readxl)
library(stringr)
library(magrittr)
library(data.table)
library(magrittr)
library(readxl)
# Read table of genera considered pollinators in the order Coleoptera
dt_poll <- read.csv(path = "./data/gbif_cleaning/taxonomy/coleoptera_final.csv",
na.strings = c("NA", ""),
colClasses = "text")
dt_poll <- read.csv(path = "./data/gbif_cleaning/taxonomy/coleoptera_final.csv",
na.strings = c("NA", ""),
colClasses = "text")
dt_poll <- read.csv(file = "./data/gbif_cleaning/taxonomy/coleoptera_final.csv",
na.strings = c("NA", ""),
colClasses = "text")
# Read table of genera considered pollinators in the order Coleoptera
dt_poll <- read.csv(file = "./data/gbif_cleaning/taxonomy/coleoptera_final.csv",
na.strings = c("NA", ""),
colClasses = "character")
library(data.table)
setDT(dt_poll)
library(magrittr)
setDT(dt_poll)
dt_poll[, .N, by = decision_vs]
# Read table of genera considered pollinators in the order Coleoptera
dt_poll <- read.csv(file = "./data/gbif_cleaning/taxonomy/coleoptera_final.csv",
na.strings = c("NA", ""),
colClasses = "character")
setDT(dt_poll)
dt_poll[, .N, by = decision_vs]
#    decision_vs   N
# 1:         yes 212
# 2:          no  24
dt_poll[decision_vs == "yes", .N, by = taxonomicStatus] # all 212 cases have accepted taxonomicStatus
dt_poll <- dt_poll[decision_vs == "yes", .(gbif_family, gbif_genus)]
dt_poll
dt_poll[duplicated(gbif_genus)] # 0 rows
library(parallel)
detectCores()
# Change nThread to your needs
n_cpu <- detectCores() - 1
# Read target taxa - flower visitors and pollinators
target_taxa_all <- read.csv(file = "./data/gbif_cleaning/taxonomy/diptera.csv",
na.strings = c("NA", ""),
colClasses = "character")
# Read target taxa - flower visitors and pollinators
# For internal ref - see Dropbox/insect-detection/taxonomy/tk-lists-notes/Diptera.xlsx"
target_taxa_all <- read.csv(file = "./data/gbif_cleaning/taxonomy/diptera.csv",
na.strings = c("NA", ""),
colClasses = "character")
setDT(target_taxa_all)
library(data.table)
setDT(target_taxa_all)
target_taxa <- target_taxa_all[, .(superfamily, family)]
target_taxa
library(data.table)
# The cleaned GBIF metadata table created with the script diptera-clean-gbif-urls.r
dt_clean_url <- readRDS("./data/gbif_cleaning/data_processed/dt_diptera_eu_clean_url.rds")
dt_clean_url
# Note that some were downloaded previously from observation.org
# We only have these locally.
dt_down <- readRDS("./data/gbif_cleaning/data_processed/all_orders_downloaded.rds")
dt_down
dt_down <- dt_down[order == "Diptera"]
library(data.table)
# The cleaned GBIF metadata table created with the script diptera-clean-gbif-urls.r
dt_clean_url <- readRDS("./data/gbif_cleaning/data_processed/dt_diptera_eu_clean_url.rds")
# Note that some were downloaded previously from observation.org
# We only have these locally.
dt_down <- readRDS("./data/gbif_cleaning/data_processed/all_orders_downloaded.rds")
# The cleaned GBIF metadata table created with the script diptera-clean-gbif-urls.r
dt_clean_url <- readRDS("./data/gbif_cleaning/data_processed/dt_diptera_eu_clean_url.rds")
# Note that some were downloaded previously from observation.org
# We only have these locally.
dt_down <- readRDS("./data/gbif_cleaning/data_processed/all_orders_downloaded.rds")
dt_down <- dt_down[order == "Diptera"]
dt_clean_url[, downloaded_obs := identifier %in% dt_down$identifier]
dt_clean_url[downloaded_obs == TRUE, .N] # 96651
dt_clean_url[, sp := paste(genus, specificEpithet, sep = "_")]
# Check changes in species synonyms/names since the last download from
# observation.org. These records have the same URL (identifier), but taxa info
# has changed (is different). So, use the most recent taxa info. For the files
# that were already downloaded, that means you have to rename the files! Sorry,
# I discovered that names updated in these databases at a later stage.
dt_test <- merge(dt_clean_url, dt_down, by = "identifier")
dt_test[, sp.y := paste(genus.y, specificEpithet.y, sep = "_")]
dt_sp_dif <- dt_test[sp != sp.y, .(identifier, sp, sp.y, family.x, family.y)]
sp_dif <- unique(dt_sp_dif, by = c("sp", "sp.y")) # ignore identifier
sp_dif[, identifier := NULL] # delete it so that it doesn't create confusion
dt_sp_dif[, .N, by = .(sp, sp.y)] # if you need the number of when such things occur
# If you check at https://fauna-eu.org/ you can find that the older names (sp.y)
# from observation.org are outdated or synonyms.
setnames(sp_dif, new = c("sp_new", "sp_old", "family_new", "family_old"))
dt_all_lic <- copy(dt_clean_url)
dt_all_lic[, n_sp_in_family := uniqueN(sp), by = family]
dt_all_lic[, n_genera_in_family := uniqueN(genus), by = family]
dt_all_lic[, n_url_in_family := .N, by = family]
dt_all_lic[, n_img_down_in_family := sum(downloaded_obs), by = family]
dt_fam_stats <- unique(dt_all_lic, by = "family")
dt_fam_stats <- dt_fam_stats[,.(family, n_sp_in_family, n_genera_in_family,
n_url_in_family, n_img_down_in_family)]
dt_fam_stats[, prc_sp := n_sp_in_family / sum(n_sp_in_family) * 100]
dt_fam_stats[, prc_gen := n_genera_in_family / sum(n_genera_in_family) * 100]
dt_fam_stats[, prc_url := n_url_in_family / sum(n_url_in_family) * 100]
dt_fam_stats[, license := "all"]
dt_fam_stats <- dt_fam_stats %>% arrange(-prc_url)
dt_fam_stats
library(tidyverse)
dt_all_lic <- copy(dt_clean_url)
dt_all_lic[, n_sp_in_family := uniqueN(sp), by = family]
dt_all_lic[, n_genera_in_family := uniqueN(genus), by = family]
dt_all_lic[, n_url_in_family := .N, by = family]
dt_all_lic[, n_img_down_in_family := sum(downloaded_obs), by = family]
dt_fam_stats <- unique(dt_all_lic, by = "family")
dt_fam_stats <- dt_fam_stats[,.(family, n_sp_in_family, n_genera_in_family,
n_url_in_family, n_img_down_in_family)]
dt_fam_stats[, prc_sp := n_sp_in_family / sum(n_sp_in_family) * 100]
dt_fam_stats[, prc_gen := n_genera_in_family / sum(n_genera_in_family) * 100]
dt_fam_stats[, prc_url := n_url_in_family / sum(n_url_in_family) * 100]
dt_fam_stats[, license := "all"]
dt_fam_stats <- dt_fam_stats %>% arrange(-prc_url)
dt_fam_stats
dt_fam_stats %>% select(family:n_genera_in_family) %>% pivot_longer(cols = !family) %>%
ggplot(aes(y=value, x=family, fill = name)) +
geom_bar(stat = "identity") +
labs(x = NULL) +
scale_x_discrete(limits= dt_fam_stats %>% arrange(-n_sp_in_family) %>% pull(family)) +
theme(axis.text.x=element_text(angle = 90, vjust = 0.5))
dt_fam_stats
dt_fam_stats %>% select(family:n_genera_in_family) %>% pivot_longer(cols = !family) %>%
ggplot(aes(y=value, x=family, fill = name)) +
geom_bar(stat = "identity") +
labs(x = NULL) +
scale_x_discrete(limits= dt_fam_stats %>% arrange(-n_sp_in_family) %>% pull(family)) +
theme(axis.text.x=element_text(angle = 90, vjust = 0.5))
dt_fam_stats %>% select(family, prc_sp:prc_url) %>% pivot_longer(cols = !family) %>%
ggplot(aes(y=value, x=family, fill = name)) +
geom_bar(stat = "identity") +
labs(x = NULL) +
scale_x_discrete(limits = dt_fam_stats %>% arrange(-prc_url) %>% pull(family)) +
theme(axis.text.x=element_text(angle = 90, vjust = 0.5))
dt_lic_ok <- copy(dt_clean_url[license_ok == TRUE])
dt_lic_ok[, n_sp_in_family := uniqueN(sp), by = family]
dt_lic_ok[, n_genera_in_family := uniqueN(genus), by = family]
dt_lic_ok[, n_url_in_family := .N, by = family]
dt_lic_ok[, n_img_down_in_family := sum(downloaded_obs), by = family]
dt_fam_stats_lic_ok <- unique(dt_lic_ok, by = "family")
dt_fam_stats_lic_ok <- dt_fam_stats_lic_ok[,.(family, n_sp_in_family, n_genera_in_family,
n_url_in_family, n_img_down_in_family)]
dt_fam_stats_lic_ok[, prc_sp := n_sp_in_family / sum(n_sp_in_family) * 100]
dt_fam_stats_lic_ok[, prc_gen := n_genera_in_family / sum(n_genera_in_family) * 100]
dt_fam_stats_lic_ok[, prc_url := n_url_in_family / sum(n_url_in_family) * 100]
dt_fam_stats_lic_ok[, license := "permisible"]
dt_fam_stats_lic_ok <- dt_fam_stats_lic_ok %>% arrange(-prc_url)
dt_fam_stats_lic_ok
dt_fam_stats_lic_ok[, .(family, n_url_in_family, n_sp_in_family)]
dt_fam_stats_lic_ok %>% select(family:n_genera_in_family) %>% pivot_longer(cols = !family) %>%
ggplot(aes(y=value, x=family, fill = name)) +
geom_bar(stat = "identity") +
labs(x = NULL) +
scale_x_discrete(limits= dt_fam_stats_lic_ok %>% arrange(-n_sp_in_family) %>% pull(family)) +
theme(axis.text.x=element_text(angle = 90, vjust = 0.5))
dt_fam_stats_lic_ok %>% select(family, prc_sp:prc_url) %>% pivot_longer(cols = !family) %>%
ggplot(aes(y=value, x=family, fill = name)) +
geom_bar(stat = "identity") +
labs(x = NULL) +
scale_x_discrete(limits = dt_fam_stats_lic_ok %>% arrange(-prc_url) %>% pull(family)) +
theme(axis.text.x=element_text(angle = 90, vjust = 0.5))
dt_fam_stats_rbind <- rbindlist(list(dt_fam_stats, dt_fam_stats_lic_ok))
# How many species we lose due to license?
dt_dif <- dt_fam_stats_rbind[, .( n_sp_dif = abs(diff(n_sp_in_family)),
prc_sp_dif = abs(diff(n_sp_in_family)) / sum(n_sp_in_family) * 100,
n_gen_dif = abs(diff(n_genera_in_family)),
n_url_dif = abs(diff(n_url_in_family)),
prc_ulr_dif = abs(diff(n_url_in_family)) / sum(n_url_in_family) * 100,
n_img_down_dif = abs(diff(n_img_down_in_family)),
prc_img_down_dif = abs(diff(n_img_down_in_family)) / sum(n_img_down_in_family) * 100 ),
by = family]
dt_dif
cbind(dt_fam_stats, dt_dif)
f_spl_lst <- vector(mode = "list", length = nrow(dt_fam_stats_lic_ok))
spl_thrs <- 200
for (i in 1:nrow(dt_fam_stats_lic_ok)){
f <- dt_fam_stats_lic_ok$family[i]
f_sp <- dt_lic_ok[family == f, unique(sp)]
n_sp <- length(f_sp)
f_sp_down <- dt_lic_ok[downloaded_obs == TRUE][family == f, unique(sp)]
n_sp_down <- length(f_sp_down)
# if character(0), be careful
# if n_sp_down >= spl_thrs then
#   take sample from downloaded species, 1 image per species
# else if n_sp_down < spl_thrs
#   take sample from downloaded and complete sample with new species urls
seed <- 2021-9-20 # change date when you sample again
set.seed(seed)
sp_spl <- sample(f_sp, size = min(n_sp, spl_thrs))
sp_down_spl <- sample(f_sp_down, size = min(n_sp_down, spl_thrs))
if (n_sp_down >= spl_thrs) {
# put the family filter, just in case two species of the same name can be
# from different families.
set.seed(seed)
# Sample 1 img per species
f_spl <- dt_lic_ok[downloaded_obs == TRUE][family == f][sp %in% sp_down_spl][, .SD[sample(.N, size = 1, replace = FALSE)], keyby = sp]
f_spl <- f_spl[,.(media_id, gbifID, order, family, sp, identifier, downloaded_obs)]
} else {
# Distribute the sample size by number of species
f_sp_union <- union(f_sp, f_sp_down)
new_sp <- setdiff(f_sp, f_sp_down)
n_img_spl <- ceiling(spl_thrs/length(f_sp_union))
set.seed(seed)
f_spl_down <- dt_lic_ok[downloaded_obs == TRUE][family == f][sp %in% sp_down_spl][, .SD[sample(.N, size = min(.N, n_img_spl), replace = FALSE)], keyby = sp]
# f_spl_down[, .N, by = sp]
set.seed(seed)
f_spl_new_url <- dt_lic_ok[downloaded_obs == FALSE][family == f][sp %in% new_sp][, .SD[sample(.N, size = min(.N, n_img_spl), replace = FALSE)], keyby = sp]
# f_spl_new_url[, .N, by = sp]
f_spl <- rbindlist(list(f_spl_down, f_spl_new_url))
f_spl <- f_spl[,.(media_id, gbifID, order, family, sp, identifier, downloaded_obs)]
}
f_spl_lst[[i]] <- f_spl
}
f_spl_dt <- rbindlist(f_spl_lst)
f_spl_dt <- merge(f_spl_dt, dt_down[, .(identifier, jpg_path)], by = "identifier", all.x = TRUE)
f_spl_dt
library(data.table)
library(stringr)
# Sample of URLs created with the script coleoptera-sample.r
dt_spl <- readRDS(file = "./data/gbif_cleaning/data_processed/diptera_sample_2021_09_20.rds")
dt_spl
dt_spl[, .N, by = family]
dt_spl[, ext := str_extract(string = identifier, pattern = "\\.jpg|\\.jpeg|\\.png")]
dt_spl[, unique(ext)]
# [1] ".jpg"  ".jpeg" ".png"
dt_spl[, .N, by = ext]
dt_spl[, save_name_no_ext := paste(order, family, sp, gbifID, media_id, sep = "_")]
dt_spl[, save_name := paste(save_name_no_ext, ext, sep = "")]
# Copy existing files
nrow(dt_spl[downloaded_obs == TRUE]) # nr of img to copy
dt_spl
# Read target taxa - flower visitors and pollinators
# For internal ref - see Dropbox/insect-detection/taxonomy/tk-lists-notes/Hymenoptera.xlsx"
target_taxa_all <- read.csv(file = "./data/gbif_cleaning/taxonomy/hymenoptera.csv",
na.strings = c("NA", ""),
colClasses = "character")
setDT(target_taxa_all)
target_taxa_all
library(data.table)
setDT(target_taxa_all)
target_taxa <- target_taxa_all[, .(superfamily, family)]
# Check if target taxa exists in occurrence data (there might be typos)
target_taxa[, exists_in_occ := family %in% unique(dt_occ_all$family)]
target_taxa[exists_in_occ == FALSE, family]
target_taxa
library(data.table)
library(data.table)
# The cleaned GBIF metadata table created with the script hymenoptera-clean-gbif-urls.r
dt_clean_url <- readRDS("./data/gbif_cleaning/data_processed/dt_hymenoptera_eu_clean_url.rds")
# Note that some were downloaded previously from observation.org
# We only have these locally.
dt_down <- readRDS("./data/gbif_cleaning/data_processed/all_orders_downloaded.rds")
dt_down[, .N, by = order]
dt_down <- dt_down[order == "Hymenoptera"]
dt_clean_url[, downloaded_obs := identifier %in% dt_down$identifier]
dt_clean_url[downloaded_obs == TRUE, .N] # 56943
dt_clean_url[, sp := paste(genus, specificEpithet, sep = "_")]
dt_lic_ok <- copy(dt_clean_url[license_ok == TRUE])
dt_lic_ok[, n_sp_in_family := uniqueN(sp), by = family]
dt_lic_ok[, n_genera_in_family := uniqueN(genus), by = family]
dt_lic_ok[, n_url_in_family := .N, by = family]
dt_lic_ok[, n_img_down_in_family := sum(downloaded_obs), by = family]
dt_fam_stats_lic_ok <- unique(dt_lic_ok, by = "family")
dt_fam_stats_lic_ok <- dt_fam_stats_lic_ok[,.(family, n_sp_in_family, n_genera_in_family,
n_url_in_family, n_img_down_in_family)]
dt_fam_stats_lic_ok[, prc_sp := n_sp_in_family / sum(n_sp_in_family) * 100]
dt_fam_stats_lic_ok[, prc_gen := n_genera_in_family / sum(n_genera_in_family) * 100]
dt_fam_stats_lic_ok[, prc_url := n_url_in_family / sum(n_url_in_family) * 100]
dt_fam_stats_lic_ok[, license := "permisible"]
dt_fam_stats_lic_ok <- dt_fam_stats_lic_ok %>% arrange(-prc_url)
dt_fam_stats_lic_ok
library(dplyr)
dt_fam_stats_lic_ok <- dt_fam_stats_lic_ok %>% arrange(-prc_url)
dt_fam_stats_lic_ok
f_spl_lst <- vector(mode = "list", length = nrow(dt_fam_stats_lic_ok))
spl_thrs <- 200
for (i in 1:nrow(dt_fam_stats_lic_ok)){
f <- dt_fam_stats_lic_ok$family[i]
f_sp <- dt_lic_ok[family == f, unique(sp)]
n_sp <- length(f_sp)
f_sp_down <- dt_lic_ok[downloaded_obs == TRUE][family == f, unique(sp)]
n_sp_down <- length(f_sp_down)
# if character(0), be careful
# if n_sp_down >= spl_thrs then
#   take sample from downloaded species, 1 image per species
# else if n_sp_down < spl_thrs
#   take sample from downloaded and complete sample with new species urls
seed <- 2021-9-20 # change date when you sample again
set.seed(seed)
sp_spl <- sample(f_sp, size = min(n_sp, spl_thrs))
sp_down_spl <- sample(f_sp_down, size = min(n_sp_down, spl_thrs))
if (n_sp_down >= spl_thrs) {
# put the family filter, just in case two species of the same name can be
# from different families.
set.seed(seed)
# Sample 1 img per species
f_spl <- dt_lic_ok[downloaded_obs == TRUE][family == f][sp %in% sp_down_spl][, .SD[sample(.N, size = 1, replace = FALSE)], keyby = sp]
f_spl <- f_spl[,.(media_id, gbifID, order, family, sp, identifier, downloaded_obs)]
} else {
# Distribute the sample size by number of species
f_sp_union <- union(f_sp, f_sp_down)
new_sp <- setdiff(f_sp, f_sp_down)
n_img_spl <- ceiling(spl_thrs/length(f_sp_union))
set.seed(seed)
f_spl_down <- dt_lic_ok[downloaded_obs == TRUE][family == f][sp %in% sp_down_spl][, .SD[sample(.N, size = min(.N, n_img_spl), replace = FALSE)], keyby = sp]
# f_spl_down[, .N, by = sp]
set.seed(seed)
f_spl_new_url <- dt_lic_ok[downloaded_obs == FALSE][family == f][sp %in% new_sp][, .SD[sample(.N, size = min(.N, n_img_spl), replace = FALSE)], keyby = sp]
# f_spl_new_url[, .N, by = sp]
f_spl <- rbindlist(list(f_spl_down, f_spl_new_url))
f_spl <- f_spl[,.(media_id, gbifID, order, family, sp, identifier, downloaded_obs)]
}
f_spl_lst[[i]] <- f_spl
}
f_spl_dt <- rbindlist(f_spl_lst)
f_spl_dt <- merge(f_spl_dt, dt_down[, .(identifier, jpg_path)], by = "identifier", all.x = TRUE)
library(data.table)
library(stringr)
# Sample of URLs created with the script hymenoptera-sample.r
dt_spl <- readRDS(file = "data_processed/hymenoptera_sample_2021_09_22.rds")
dt_spl[, .N, by = family]
# Sample of URLs created with the script hymenoptera-sample.r
dt_spl <- readRDS(file = "./data/gbif_cleaning/data_processed/hymenoptera_sample_2021_09_22.rds")
dt_spl[, .N, by = family]
test <- dt_spl[, .N, keyby = .(family, sp)]
dt_spl[, ext := str_extract(string = identifier, pattern = "\\.jpg|\\.jpeg|\\.JPG|\\.png")]
dt_spl[, .N, by = ext]
dt_spl[ext == ".JPG", ext := ".jpg"]
dt_spl[, save_name_no_ext := paste(order, family, sp, gbifID, media_id, sep = "_")]
dt_spl[, save_name := paste(save_name_no_ext, ext, sep = "")]
dt_spl[, save_name_no_ext := NULL]
# Copy existing files
nrow(dt_spl[downloaded_obs == TRUE]) # nr of img to copy
# Sample of URLs created with the script hymenoptera-sample.r
dt_spl <- readRDS(file = "./data/gbif_cleaning/data_processed/hymenoptera_sample_2021_09_22.rds")
dt_spl[, .N, by = family]
test <- dt_spl[, .N, keyby = .(family, sp)]
dt_spl[, ext := str_extract(string = identifier, pattern = "\\.jpg|\\.jpeg|\\.JPG|\\.png")]
dt_spl[, .N, by = ext]
dt_spl[ext == ".JPG", ext := ".jpg"]
library(data.table)
library(stringr)
# Sample of URLs created with the script hymenoptera-sample.r
dt_spl <- readRDS(file = "./data/gbif_cleaning/data_processed/hymenoptera_sample_2021_09_22.rds")
dt_spl[, .N, by = family]
test <- dt_spl[, .N, keyby = .(family, sp)]
dt_spl[, ext := str_extract(string = identifier, pattern = "\\.jpg|\\.jpeg|\\.JPG|\\.png")]
dt_spl[, .N, by = ext]
dt_spl[ext == ".JPG", ext := ".jpg"]
dt_spl[, save_name_no_ext := paste(order, family, sp, gbifID, media_id, sep = "_")]
dt_spl[, save_name := paste(save_name_no_ext, ext, sep = "")]
dt_spl[, save_name_no_ext := NULL]
# Copy existing files
nrow(dt_spl[downloaded_obs == TRUE]) # nr of img to copy
# Create this folder manually
copy_path <- "./data/gbif_cleaning/gbif/samples/img_hymenoptera_sample_2021_09_22"
dt_spl
library(bit64)
library(data.table)
library(stringr)
library(parallel)
# Read target taxa - flower visitors and pollinators
# For internal ref - see Dropbox/insect-detection/taxonomy/tk-lists-notes/lepidoptera.xlsx"
target_taxa_all <- read.csv(file = "./data/gbif_cleaning/taxonomy/lepidoptera.csv",
na.strings = c("NA", ""),
colClasses = "character")
setDT(target_taxa_all)
target_taxa <- target_taxa_all[, .(superfamily, family)]
target_taxa
# Check if some URls are among those downloaded from observation.org already.
# For non-pollinators should not be the case.
dt_down <- readRDS("./data/gbif_cleaning/data_processed/all_orders_downloaded.rds")
dt_down[, .N, by = order]
library(data.table)
library(data.table)
library(dplyr)
# Check if some URls are among those downloaded from observation.org already.
# For non-pollinators should not be the case.
dt_down <- readRDS("./data/gbif_cleaning/data_processed/all_orders_downloaded.rds")
dt_down[, .N, by = order]
# The cleaned GBIF metadata table created with the script clean-gbif-urls.r
dt_clean_url <- readRDS("./data/gbif_cleaning/data_processed/dt_orth_hemi_aran_form_eu_clean_url.rds")
# Mark those downloaded already
dt_clean_url[, downloaded_obs := identifier %in% dt_down$identifier]
dt_clean_url[downloaded_obs == TRUE, .N] # expect 0
# Are there any families that can have the same name across several orders?
any(duplicated(dt_clean_url[, unique(family)])) # expect FALSE
dt_lic_ok <- copy(dt_clean_url[license_ok == TRUE])
dt_lic_ok[, uniqueN(family), by = order] # N families per order (pay attention to Hymenoptera)
# 1:     Araneae 55
# 2:  Orthoptera 13
# 3:   Hemiptera 85
# 4: Hymenoptera  1
dt_lic_ok[, uniqueN(sp), by = order] # N species per order
library(data.table)
# The cleaned GBIF metadata table created with the script clean-gbif-urls.r
dt_clean_url <- readRDS("./data/gbif_cleaning/data_processed/dt_orth_hemi_aran_form_eu_clean_url.rds")
dt_clean_url[, sp := paste(genus, specificEpithet, sep = "_")]
# Are there any families that can have the same name across several orders?
any(duplicated(dt_clean_url[, unique(family)])) # expect FALSE
dt_lic_ok <- copy(dt_clean_url[license_ok == TRUE])
dt_lic_ok[, uniqueN(family), by = order] # N families per order (pay attention to Hymenoptera)
# 1:     Araneae 55
# 2:  Orthoptera 13
# 3:   Hemiptera 85
# 4: Hymenoptera  1
dt_lic_ok[, uniqueN(sp), by = order] # N species per order
# Estimate how many images per species and how many images in total:
n_img_estim_dt <- dt_lic_ok[, uniqueN(sp), by = order][, n_img_per_sp := round(2000/V1)][, n_img := n_img_per_sp * V1]
n_img_estim_dt[]
spl_lst <- vector(mode = "list", length = nrow(n_img_estim_dt))
for (i in 1:nrow(n_img_estim_dt)){
ord <- n_img_estim_dt[i, order]
n_img_per_sp <- n_img_estim_dt[i, n_img_per_sp]
spl_lst[[i]] <- dt_lic_ok[order == ord][, .SD[sample(.N, size = min(.N, n_img_per_sp), replace = FALSE)], keyby = sp]
}
spl_dt <- rbindlist(spl_lst)
# Check if we sampled what we needed. We can get smaller values because
# sometimes there were not enough available images per species.
spl_dt[, .N, by = order]
spl_dt[, uniqueN(identifier), by = order]
# The above should both give same values if URLs are unique
spl_dt[, uniqueN(identifier)] == nrow(spl_dt) # must be TRUE, otherwise you risk to have same URL for multiple rows.
library(data.table)
library(stringr)
# Sample of URLs created with the script sample.r
dt_spl <- readRDS(file = "./data/gbif_cleaning/data_processed/orth_hemi_aran_form_sample_2021_10_28.rds")
dt_spl[, unique(order)]
# "Araneae"     "Orthoptera"  "Hemiptera"   "Hymenoptera"
dt_spl[, .N, by = order]
dt_spl[, ext := str_extract(string = identifier, pattern = "\\.jpg|\\.jpeg|\\.JPG|\\.png")]
dt_spl[, .N, by = ext]
# Check this NA. Seems to be a jpeg
dt_spl[is.na(ext)]
dt_spl[is.na(ext),  ext := ".jpeg"]
dt_spl[ext == ".JPG", ext := ".jpg"]
dt_spl[, save_name_no_ext := paste(order, family, sp, gbifID, media_id, sep = "_")]
dt_spl[, save_name := paste(save_name_no_ext, ext, sep = "")]
dt_spl[, save_name_no_ext := NULL]
library(bit64)
library(data.table)
library(stringr)
dt_spl <- readRDS(file = "./data/gbif_cleaning/data_processed/syrphidae_sample_2022_06_17.rds")
dt_spl[, ext := str_extract(string = identifier, pattern = "\\.jpg|\\.jpeg|\\.JPG|\\.png")]
dt_spl[, .N, by = ext]
# Create image names with taxa info and IDs
dt_spl[, save_name_no_ext := paste(order, family, sp, gbifID, media_id, sep = "_")]
dt_spl[, save_name := paste(save_name_no_ext, ext, sep = "")]
dt_spl[, save_name_no_ext := NULL]
